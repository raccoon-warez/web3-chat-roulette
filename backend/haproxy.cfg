# HAProxy configuration for Web3 Chat Roulette scaling
# High Availability Load Balancer Configuration

global
    # Security and performance settings
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3000ms
    
    # Connection limits and rate limiting
    maxconn 10000
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    # Logging
    option httplog
    option dontlognull
    option log-health-checks
    
    # Health checks
    option redispatch
    retries 3

    # Compression
    compression algo gzip
    compression type text/html text/plain text/css application/json application/javascript text/xml application/xml

# Statistics interface
frontend stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats show-legends
    stats admin if TRUE
    
    # Security for stats page
    stats auth admin:admin123
    stats hide-version

# Frontend for HTTP traffic
frontend web3_frontend_http
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # Rate limiting (basic)
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Redirect HTTP to HTTPS (uncomment when SSL is configured)
    # redirect scheme https code 301 if !{ ssl_fc }
    
    # Route to backend
    default_backend web3_backend

# Frontend for HTTPS traffic (when SSL certificates are available)
frontend web3_frontend_https
    bind *:443 ssl crt /etc/ssl/certs/web3-chat.pem
    
    # Security headers for HTTPS
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: ws:; font-src 'self' data:; object-src 'none'; media-src 'self'; frame-src 'none';"
    
    # Rate limiting for HTTPS
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 30 }
    
    # WebSocket upgrade handling
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_connection hdr_beg(Connection) -i upgrade
    use_backend web3_websocket_backend if is_websocket is_websocket_connection
    
    # API routes with specific handling
    acl is_api path_beg /api/
    acl is_health path_beg /health
    acl is_metrics path_beg /metrics
    
    # Route to appropriate backend
    use_backend web3_api_backend if is_api
    use_backend web3_health_backend if is_health
    use_backend web3_metrics_backend if is_metrics
    default_backend web3_backend

# Main application backend with session persistence
backend web3_backend
    # Load balancing algorithm
    balance roundrobin
    
    # Session persistence using cookies
    cookie SERVERID insert indirect nocache
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Server definitions with health checks
    server web3-app-1 web3-app-1:3001 check cookie app1 maxconn 1000 rise 2 fall 3 inter 5000ms
    server web3-app-2 web3-app-2:3002 check cookie app2 maxconn 1000 rise 2 fall 3 inter 5000ms
    
    # Backup server configuration (if available)
    # server web3-app-backup backup-server:3001 check backup cookie backup maxconn 500

# API-specific backend with different balancing
backend web3_api_backend
    # Use least connections for API requests
    balance leastconn
    
    # Health check for API endpoints
    option httpchk GET /health
    http-check expect status 200
    
    # Enhanced timeouts for API
    timeout server 30000ms
    
    # Servers
    server web3-app-1 web3-app-1:3001 check maxconn 500 rise 2 fall 3 inter 3000ms
    server web3-app-2 web3-app-2:3002 check maxconn 500 rise 2 fall 3 inter 3000ms

# WebSocket backend with sticky sessions
backend web3_websocket_backend
    # Use source IP for WebSocket persistence
    balance source
    
    # WebSocket-specific settings
    timeout server 60000ms
    timeout tunnel 3600000ms  # 1 hour for WebSocket connections
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # Servers with WebSocket support
    server web3-app-1 web3-app-1:3001 check maxconn 2000 rise 2 fall 3 inter 10000ms
    server web3-app-2 web3-app-2:3002 check maxconn 2000 rise 2 fall 3 inter 10000ms

# Health check backend
backend web3_health_backend
    # Simple round-robin for health checks
    balance roundrobin
    
    # Quick health check
    option httpchk GET /health
    http-check expect status 200
    timeout server 5000ms
    
    # Servers
    server web3-app-1 web3-app-1:3001 check maxconn 100 rise 1 fall 2 inter 2000ms
    server web3-app-2 web3-app-2:3002 check maxconn 100 rise 1 fall 2 inter 2000ms

# Metrics backend for monitoring
backend web3_metrics_backend
    # Round-robin for metrics collection
    balance roundrobin
    
    # Metrics-specific timeouts
    timeout server 15000ms
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # Servers
    server web3-app-1 web3-app-1:3001 check maxconn 50 rise 1 fall 2 inter 5000ms
    server web3-app-2 web3-app-2:3002 check maxconn 50 rise 1 fall 2 inter 5000ms

# Management backend for cluster management
backend web3_management_backend
    # Source-based balancing for management consistency
    balance source
    
    # Management-specific timeouts
    timeout server 30000ms
    
    # Health check on management port
    option httpchk GET /cluster/status
    http-check expect status 200
    
    # Servers on management ports
    server web3-app-1 web3-app-1:9001 check maxconn 10 rise 1 fall 2 inter 10000ms
    server web3-app-2 web3-app-2:9002 check maxconn 10 rise 1 fall 2 inter 10000ms

# Error handling and maintenance pages
# Custom error pages can be served from here

# Logging configuration
# Logs will be sent to syslog by default
# Configure rsyslog to handle HAProxy logs appropriately